#!/bin/sh

PATH="${PATH}:."

nCONFIG="/sys/class/gpio/gpio13/value"
CONFIG_DONE="/sys/class/gpio/gpio26/value"
nSTATUS="/sys/class/gpio/gpio21/value"
SPI="/dev/spidev0.0"
CODE="${1:-spimux.rbf}"

ioget() {
	eval cat \$$1
}

ioset() {
	eval "echo $2 >\$$1"
}

iocheck() {
	sig=$1
	value=$2
	shift
	shift
	if [ $(ioget $sig) != $value ]; then
		echo "ERROR: $sig != $value $@" >&2
		exit 1
	fi
}

# Remove I2C MUX if present
echo 1-0070 > /sys/bus/i2c/drivers/pca954x/unbind 2>/dev/null

# Configure SPI parameters
spi-test -C -s 5000000 -b 8 -D $SPI -q 00

# Reset FPGA
ioset nCONFIG 0
iocheck CONFIG_DONE 0 when nCONFIG is LOW
iocheck nSTATUS 0 when nCONFIG is LOW

# Start programming FPGA
ioset nCONFIG 1

iocheck CONFIG_DONE 0 when nCONFIG is HIGH
iocheck nSTATUS 1 when nCONFIG is HIGH

dd if=$CODE of=$SPI bs=4K

#sleep 1

iocheck CONFIG_DONE 1 when nCONFIG is HIGH


# Enable i2c MUX
echo 1-0070 > /sys/bus/i2c/drivers_probe

# Configure LCD
lcd-message --init -l 2 $(basename $CODE .rbf | sed -e 's/_bitrev//' -e 's/_pad//' ) 2>/dev/null


# Allow user access to needed devices
chmod a+rw $SPI /dev/i2c-* /sys/bus/i2c/devices/*/eeprom
